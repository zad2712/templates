# Backend configuration for AWS Terraform state storage
# Author: Diego A. Zarate
# Environment: Production
# Layer: Networking

# S3 bucket for storing Terraform state files
bucket = "terraform-state-aws-infra-prod"

# Key path for this layer's state file in the S3 bucket
key = "layers/networking/prod/terraform.tfstate"

# AWS region where the S3 bucket is located
region = "us-east-1"

# DynamoDB table for state locking to prevent concurrent modifications
dynamodb_table = "terraform-state-lock-aws-infra-prod"

# Enable encryption of the state file in S3
encrypt = true

# KMS key ID for state file encryption (use customer-managed key for production)
kms_key_id = "arn:aws:kms:us-east-1:ACCOUNT_ID:key/PRODUCTION_KEY_ID"

# Workspace key prefix for multiple workspaces (optional)
workspace_key_prefix = "workspaces"

# Server-side encryption configuration
server_side_encryption_configuration {
  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm     = "aws:kms"
      kms_master_key_id = "arn:aws:kms:us-east-1:ACCOUNT_ID:key/PRODUCTION_KEY_ID"
    }
    bucket_key_enabled = true
  }
}

# Additional security settings
versioning {
  enabled = true
}

# MFA delete protection (enable in production)
mfa_delete = true

# Lifecycle configuration for compliance and cost optimization
lifecycle_configuration {
  rule {
    id      = "terraform_state_lifecycle_prod"
    enabled = true
    
    # Keep more versions in production for rollback capability
    noncurrent_version_expiration {
      days = 365
    }
    
    # Archive old versions to IA after 30 days
    noncurrent_version_transition {
      days          = 30
      storage_class = "STANDARD_IA"
    }
    
    # Archive to Glacier after 90 days
    noncurrent_version_transition {
      days          = 90
      storage_class = "GLACIER"
    }
    
    abort_incomplete_multipart_upload {
      days_after_initiation = 3
    }
  }
}

# Cross-region replication for disaster recovery
replication_configuration {
  role = "arn:aws:iam::ACCOUNT_ID:role/terraform-state-replication-role"
  
  rules {
    id     = "terraform-state-replication"
    status = "Enabled"
    
    destination {
      bucket        = "arn:aws:s3:::terraform-state-aws-infra-prod-replica"
      storage_class = "STANDARD_IA"
      
      encryption_configuration {
        replica_kms_key_id = "arn:aws:kms:us-west-2:ACCOUNT_ID:key/REPLICA_KEY_ID"
      }
    }
  }
}